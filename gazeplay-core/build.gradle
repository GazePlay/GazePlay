import org.apache.tools.ant.filters.ReplaceTokens

dependencies {
    compile 'com.github.agomezmoron:screen-recorder:0.0.3'
    compile project(':gazeplay-commons')
    compile project(':gazeplay-games-commons')
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'org.rxtx:rxtx:2.1.7'
    compile 'com.theeyetribe:eyetribe-java:0.9.77'
    compile 'ch.qos.logback:logback-classic:1.2.1'
    compile 'ch.qos.logback:logback-core:1.2.1'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'uk.org.lidalia:sysout-over-slf4j:1.0.2'
    compile 'javax.media:jmf:2.1.1e'
    compile 'ws.schild:jave-all-deps:2.5.0'
    compile 'ws.schild:jave-core:2.5.0'
    runtime 'org.slf4j:jcl-over-slf4j:1.7.25'
    runtime 'org.slf4j:log4j-over-slf4j:1.7.25'
    compile 'org.json:json:20200518'
    compile 'com.github.everit-org.json-schema:org.everit.json.schema:1.12.1'

    compile "info.picocli:picocli-spring-boot-starter:4.0.4"

    runtime project(':gazeplay-games')

    testImplementation "junit:junit:4.12"
    testImplementation "com.ginsberg:junit5-system-exit:1.0.0"
}

test {
    jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
}

jar {
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Univ. Grenoble Alpes - LIG - GETALP",
                "Main-Class": 'net.gazeplay.GazePlayLauncher',
                "Class-Path": configurations.runtime.collect { it.getName() }.join(' '),
                "JavaFX-Version": javafxVersion,
                "Built-By": System.properties['user.name']
        )
    }
}

tasks.jar.dependsOn('createLicence')

task createLicence(dependsOn: ['processResources'], type: Copy, group: 'license') {
    from("${rootDir}/gradle/templates/licence.txt")
    expand([
            "version": version,
            "date"   : new Date().format('yyyy-MM-dd')
    ])
    into("${processResources.destinationDir}/data/common")
}

def generatedResources = "${buildDir}/generated-resources/main"

sourceSets.main.output.dir(generatedResources, builtBy: 'generateGamesCatalog')

task generateGamesCatalog {
    outputs.dir generatedResources

    doLast {
        def sourceSet = project(':gazeplay-games').sourceSets.findByName('main').java
        def packages = sourceSet
                .filter { it.path.endsWith('.java') }
                .filter { it.path.contains('SpecSource') }
                .collect {
                    it.path
                            .substring(sourceSet.srcDirs[0].path.length() + 1)
                            .replace('/', '.')
                            .replace('\\', '.')
                            .replace('.java', '')
                }
                .unique()

        def file = new File(generatedResources, "games-catalog.txt")
        if (file.exists()) {
            file.delete()
        }
        packages.each { file.append(it + '\n') }
    }
}
