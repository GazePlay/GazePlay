import org.apache.tools.ant.filters.ReplaceTokens

dependencies {
    implementation 'com.github.agomezmoron:screen-recorder:0.0.3'
    implementation project(':gazeplay-commons')
    implementation project(':gazeplay-games-commons')
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'org.rxtx:rxtx:2.1.7'
    implementation 'com.theeyetribe:eyetribe-java:0.9.77'
    implementation 'ch.qos.logback:logback-classic:1.2.11'
    implementation 'ch.qos.logback:logback-core:1.2.11'
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'uk.org.lidalia:sysout-over-slf4j:1.0.2'
    implementation 'javax.media:jmf:2.1.1e'
    implementation 'ws.schild:jave-all-deps:2.5.0'
    implementation 'ws.schild:jave-core:2.5.0'
    implementation 'io.github.classgraph:classgraph:4.8.146'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.mageddo.tobby-transactional-outbox:spring:1.5.1'
    runtimeOnly 'org.slf4j:jcl-over-slf4j:1.7.36'
    runtimeOnly 'org.slf4j:log4j-over-slf4j:1.7.36'
    implementation 'org.json:json:20220320'
    implementation 'com.github.everit-org.json-schema:org.everit.json.schema:1.12.1'
    implementation 'com.github.vatbub:mslinks:1.0.6.2'
    implementation 'info.picocli:picocli-spring-boot-starter:4.6.3'

    runtimeOnly project(':gazeplay-games')

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.ginsberg:junit5-system-exit:1.1.2'
}

test {
    jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
}

jar {
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Univ. Grenoble Alpes - LIG - GETALP",
                "Main-Class": 'net.gazeplay.GazePlayLauncher',
                "Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                "JavaFX-Version": javafxVersion,
                "Built-By": System.properties['user.name']
        )
    }
}

tasks.jar.dependsOn('createLicence')

task createLicence(dependsOn: ['processResources'], type: Copy, group: 'license') {
    from("${rootDir}/gradle/templates/licence.txt")
    expand([
            "version": version,
            "date"   : new Date().format('yyyy-MM-dd')
    ])
    into("${processResources.destinationDir}/data/common")
}

def generatedResources = "${buildDir}/generated-resources/main"

sourceSets.main.output.dir(generatedResources, builtBy: 'generateGamesCatalog')
sourceSets.main.output.dir(generatedResources, builtBy: 'generateEvalsCatalog')

task generateGamesCatalog {
    outputs.dir generatedResources

    doLast {
        def sourceSet = project(':gazeplay-games').sourceSets.findByName('main').java
        def packages = sourceSet
                .filter { it.path.endsWith('.java') }
                .filter { it.path.contains('SpecSource') }
                .filter { !it.path.contains('GazeplayEval')}
                .collect {
                    it.path
                            .substring(sourceSet.srcDirs[0].path.length() + 1)
                            .replace('/', '.')
                            .replace('\\', '.')
                            .replace('.java', '')
                }
                .unique()

        def file = new File(generatedResources, "games-catalog.txt")
        if (file.exists()) {
            file.delete()
        }
        packages.each { file.append(it + '\n') }
    }
}

task generateEvalsCatalog {
    outputs.dir generatedResources

    doLast {
        def sourceSet = project(':gazeplay-games').sourceSets.findByName('main').java

        def labyrinth = sourceSet
                .filter { it.path.endsWith('.java') }
                .filter { it.path.contains('Labyrinth') }
                .filter { it.path.contains('SpecSource') }
                .collect {
                    it.path
                            .substring(sourceSet.srcDirs[0].path.length() + 1)
                            .replace('/', '.')
                            .replace('\\', '.')
                            .replace('.java', '')
                }
                .unique()

        def mole = sourceSet
                .filter { it.path.endsWith('.java') }
                .filter { it.path.contains('WhacAMole') }
                .filter { it.path.contains('SpecSource') }
                .collect {
                    it.path
                            .substring(sourceSet.srcDirs[0].path.length() + 1)
                            .replace('/', '.')
                            .replace('\\', '.')
                            .replace('.java', '')
                }
                .unique()

        def memory = sourceSet
                .filter { it.path.endsWith('.java') }
                .filter { it.path.contains('MemoryGame') }
                .filter { it.path.contains('SpecSource') }
                .collect {
                    it.path
                            .substring(sourceSet.srcDirs[0].path.length() + 1)
                            .replace('/', '.')
                            .replace('\\', '.')
                            .replace('.java', '')
                }
                .unique()

        def animal = sourceSet
                .filter { it.path.endsWith('.java') }
                .filter { it.path.contains('WhereIsTheAnimal') }
                .filter { it.path.contains('SpecSource') }
                .collect {
                    it.path
                            .substring(sourceSet.srcDirs[0].path.length() + 1)
                            .replace('/', '.')
                            .replace('\\', '.')
                            .replace('.java', '')
                }
                .unique()

        def frog = sourceSet
                .filter { it.path.endsWith('.java') }
                .filter { it.path.contains('FrogGame') }
                .filter { it.path.contains('SpecSource') }
                .collect {
                    it.path
                            .substring(sourceSet.srcDirs[0].path.length() + 1)
                            .replace('/', '.')
                            .replace('\\', '.')
                            .replace('.java', '')
                }
                .unique()

        def file = new File(generatedResources, "evals-catalog.txt")
        if (file.exists()) {
            file.delete()
        }

        labyrinth.each { file.append(it + '\n') }
        mole.each { file.append(it + '\n') }
        memory.each { file.append(it + '\n') }
        animal.each { file.append(it + '\n') }
        frog.each { file.append(it + '\n') }
    }
}
