on:
  push:
    branches:
      - master

name: Release GazePlay

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: false
          haskell: false
          large-packages: false
          swap-storage: false

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Download JREs
        run: |
          chmod +x ./gradlew
          ./gradlew --stacktrace --info downloadAndExtractJREs
          chmod -R 777 build/jre
      - name: Setup Git Config
        run: |
          git config --global user.email "ci@gazeplay.net"
          git config --global user.name "GazePlay Automation"
      - name: Generate Releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew --stacktrace --info release
      # add this for installer 32bits afsr and bera (don't forget to uncomment the lines at the very bottom of the build.gradle file at the root
      # mv gazeplay-afsr-windows-x32*installer.exe gazeplay-afsr-windows-x32-installer.exe
      # mv gazeplay-bera-windows-x32*installer.exe gazeplay-bera-windows-x32-installer.exe
      - name: Rename Releases
        run: |
          cd ./build/distributions/
          mv gazeplay-linux-x64*.tar.gz gazeplay-linux-x64.tar.gz
          mv gazeplay-macos*.tar.gz gazeplay-macos.tar.gz
          mv gazeplay-arm*.tar.gz gazeplay-arm.tar.gz
          mv gazeplay-windows-x64*.zip gazeplay-windows-x64.zip
          mv gazeplay-windows-x64*installer.exe gazeplay-windows-x64-installer.exe
          mv gazeplay-windows-x32*.zip gazeplay-windows-x32.zip
          mv gazeplay-windows-x32*installer.exe gazeplay-windows-x32-installer.exe
          mv gazeplay-afsr-windows-x64*.zip gazeplay-afsr-windows-x64.zip
          mv gazeplay-afsr-windows-x64*installer.exe gazeplay-afsr-windows-x64-installer.exe
          mv gazeplay-afsr-windows-x32*.zip gazeplay-afsr-windows-x32.zip
          mv gazeplay-bera-windows-x64*.zip gazeplay-bera-windows-x64.zip
          mv gazeplay-bera-windows-x64*installer.exe gazeplay-bera-windows-x64-installer.exe
          mv gazeplay-bera-windows-x32*.zip gazeplay-bera-windows-x32.zip
          mv gazeplay-no-jre*.zip gazeplay-no-jre.zip
      - name: Get Env
        run: |
          echo "REPO_NAME=${{ github.repository }}" >> $GITHUB_ENV
          echo "REPO_BASENAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV
      - name: New tag
        id: new-tag
        run: |
          LATEST_RELEASE_INFO=$(curl -s https://api.github.com/repos/${{ env.REPO_NAME }}/releases/latest)
          NEW_VERSION_LINK=$(echo "$LATEST_RELEASE_INFO" | grep "browser_download_url.*${{ env.REPO_BASENAME }}*" | cut -d: -f2,3 | tr -d \")
          NEW_VERSION=$( echo "${NEW_VERSION_LINK}" | cut -d/ -f9)
          NEW_VERSION_NO_EXT=$( echo ${NEW_VERSION} | cut -d. -f1)
          NEW_VERSION_NAME=$(echo "$LATEST_RELEASE_INFO" | grep "name.*${{ env.REPO_BASENAME }}*" | cut -d: -f2,3 | tr -d \" | head -n 1 | tr -d \,)
          GET_TAG=$(echo "$NEW_VERSION_NAME" | cut -d " " -f3)
          TAG_1=$(echo "$GET_TAG" | cut -d. -f1)
          TAG_2=$(echo "$GET_TAG" | cut -d. -f2)
          TAG_3=$(echo "$GET_TAG" | cut -d. -f3)
          NEW_TAG=$(echo "$(( $TAG_3 + 1 ))")
          TAG="${TAG_1}.${TAG_2}.${NEW_TAG}"
          echo ::set-output name=tag::$(echo $TAG)

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new-tag.outputs.tag }}
          release_name: ${{ env.REPO_BASENAME }} ${{ steps.new-tag.outputs.tag }}
          draft: false
          prerelease: true

  upload-gazeplay-Linux-Mac-Arm-assets-release:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Upload Gazeplay Linux/Mac/Arm to Release
        id: upload-gazeplay-assets
        uses: csexton/release-asset-action@v2
        with:
          release-url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
          files: |
            ./build/distributions/gazeplay-linux-x64.tar.gz
            ./build/distributions/gazeplay-macos.tar.gz
            ./build/distributions/gazeplay-arm.tar.gz
          github-token: ${{ secrets.GITHUB_TOKEN }}

  upload-gazeplay-Windows-assets-release:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Upload Gazeplay Windows to Release
        id: upload-windows-assets
        uses: csexton/release-asset-action@v2
        with:
          release-url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
          files: |
            ./build/distributions/gazeplay-windows-x64.zip
            ./build/distributions/gazeplay-windows-x64-installer.exe
            ./build/distributions/gazeplay-windows-x32.zip
            ./build/distributions/gazeplay-windows-x32-installer.exe
          github-token: ${{ secrets.GITHUB_TOKEN }}

  upload-gazeplay-AFSR-assets-release:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Upload Gazeplay-AFSR to Release
        id: upload-afsr-assets
        uses: csexton/release-asset-action@v2
        with:
          release-url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.

          # add this to add afsr installer 32bits to the release
          # ./build/distributions/gazeplay-afsr-windows-x32-installer.exe
          files: |
            ./build/distributions/gazeplay-afsr-windows-x64.zip
            ./build/distributions/gazeplay-afsr-windows-x64-installer.exe
            ./build/distributions/gazeplay-afsr-windows-x32.zip
          github-token: ${{ secrets.GITHUB_TOKEN }}

  upload-gazeplay-Bera-assets-release:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Upload Gazeplay-Bera to Release
        id: upload-bera-assets
        uses: csexton/release-asset-action@v2
        with:
          release-url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.

          # add this to add bera installer 32bits to the release
          # ./build/distributions/gazeplay-bera-windows-x32-installer.exe
          files: |
            ./build/distributions/gazeplay-bera-windows-x64.zip
            ./build/distributions/gazeplay-bera-windows-x64-installer.exe
            ./build/distributions/gazeplay-bera-windows-x32.zip
          github-token: ${{ secrets.GITHUB_TOKEN }}

  upload-No-JRE-to-Release:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Upload No JRE to Release
        id: upload-nojre-assets
        uses: csexton/release-asset-action@v2
        with:
          release-url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
          files: |
            ./build/distributions/gazeplay-no-jre.zip
          github-token: ${{ secrets.GITHUB_TOKEN }}
