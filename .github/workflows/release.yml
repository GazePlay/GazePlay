on:
  push:
    branches:
      - master

name: Release GazePlay

jobs:
  release:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
          cache: 'gradle'

      - name: Setup Git Config
        run: |
          git config --global user.email "ci@gazeplay.net"
          git config --global user.name "GazePlay Automation"

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        run: ./gradlew build

      - name: Generate Releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew generateWindowsInstallerInDocker

      - name: Rename Releases
        run: |
          cd ./build/distributions/
          mv gazeplay-windows-x64*.zip gazeplay-windows-x64.zip
          mv gazeplay-windows-x64*installer.exe gazeplay-windows-x64-installer.exe

      - name: Get Env
        run: |
          echo "REPO_NAME=${{ github.repository }}" >> $GITHUB_ENV
          echo "REPO_BASENAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      - name: New tag
        id: new-tag
        run: |
          LATEST_RELEASE_INFO=$(curl -s https://api.github.com/repos/${{ env.REPO_NAME }}/releases/latest)
          NEW_VERSION_LINK=$(echo "$LATEST_RELEASE_INFO" | grep "browser_download_url.*${{ env.REPO_BASENAME }}*" | cut -d: -f2,3 | tr -d \")
          NEW_VERSION=$( echo "${NEW_VERSION_LINK}" | cut -d/ -f9)
          NEW_VERSION_NO_EXT=$( echo ${NEW_VERSION} | cut -d. -f1)
          NEW_VERSION_NAME=$(echo "$LATEST_RELEASE_INFO" | grep "name.*${{ env.REPO_BASENAME }}*" | cut -d: -f2,3 | tr -d \" | head -n 1 | tr -d \,)
          GET_TAG=$(echo "$NEW_VERSION_NAME" | cut -d " " -f3)
          TAG_1=$(echo "$GET_TAG" | cut -d. -f1)
          TAG_2=$(echo "$GET_TAG" | cut -d. -f2)
          TAG_3=$(echo "$GET_TAG" | cut -d. -f3)
          NEW_TAG=$(echo "$(( $TAG_3 + 1 ))")
          TAG="${TAG_1}.${TAG_2}.${NEW_TAG}"
          echo ::set-output name=tag::$(echo $TAG)

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new-tag.outputs.tag }}
          release_name: ${{ env.REPO_BASENAME }} ${{ steps.new-tag.outputs.tag }}
          draft: false
          prerelease: true

      - name: Upload Gazeplay to Release
        id: upload-assets
        uses: csexton/release-asset-action@v2
        with:
          release-url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.

          # add this to add afsr installer 32bits to the release
          # ./build/distributions/gazeplay-afsr-windows-x32-installer.exe
          files: |
            ./build/distributions/gazeplay-windows-x64.zip
            ./build/distributions/gazeplay-windows-x64-installer.exe
          github-token: ${{ secrets.GITHUB_TOKEN }}
