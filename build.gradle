plugins {
    id 'application'
    id 'distribution'
    id 'jacoco'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'io.freefair.lombok' version '6.4.3'
    id 'com.github.hierynomus.license-report' version '0.16.1'
    id 'com.github.spotbugs' version '5.0.7'
    id 'net.researchgate.release' version '2.6.0'
    id "de.undercouch.download" version '4.0.4'

    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

spotbugsMain.enabled = true
spotbugsTest.enabled = false

logging.captureStandardOutput LogLevel.INFO

ext.javafxVersion = "17.0.2"

apply from: "${rootDir}/gradle/package.gradle"
apply from: "${rootDir}/gradle/installer.gradle"
apply from: "${rootDir}/gradle/jre.gradle"
apply from: "${rootDir}/gradle/drivers.gradle"

allprojects {
    group = 'com.github.gazeplay'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()

        maven {
            url = 'https://jitpack.io'
        }

        maven {
            url = 'https://raw.github.com/agomezmoron/screen-recorder/mvn-repo'
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: 'org.openjfx.javafxplugin'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'com.github.hierynomus.license-report'
    apply plugin: 'com.github.spotbugs'
    apply plugin: "pmd"
    apply plugin: 'distribution'

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/java')
            }
            resources.srcDir file('src/integration-test/resources')
        }
    }

    apply from: "${rootDir}/gradle/integration.gradle"
    apply from: "${rootDir}/gradle/pmd.gradle"

    configurations {
        integrationTestImplementation.extendsFrom testImplementation
        integrationTestRuntime.extendsFrom testRuntime
        runtimeOnly.canBeResolved(true)
    }

    javafx {
        version = javafxVersion
        modules = ['javafx.controls', 'javafx.swing', 'javafx.media', 'javafx.web']
    }

    spotbugs {
        toolVersion = '4.7.0'

        //ignoreFailures = false
        //effort = "max"
        //reportLevel = "high"
        excludeFilter = file("spotbugs-exclude.xml")
    }

    spotbugsMain.enabled = true
    spotbugsTest.enabled = false

    downloadLicenses {
        dependencyConfiguration = 'compileClasspath'
        includeProjectDependencies = true
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0'
        testImplementation "org.testfx:testfx-core:4.0.16-alpha"
        testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
        testImplementation "org.testfx:openjfx-monocle:jdk-11+26"
        testImplementation "org.jmockit:jmockit:1.49"
        testImplementation "org.mockito:mockito-core:3.12.+"
    }

    sourceCompatibility = '17'
    targetCompatibility = '17'

    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()
        if (project.hasProperty('excludeTests')) {
            exclude project.property('excludeTests')
        }
    }

    tasks.withType(Test) {
        maxHeapSize = "3g"
    }

    jacoco {
        toolVersion '0.8.3' // We need this version for JMockit to work.
    }

    tasks.jacocoTestReport.dependsOn('test')

    pmd {
        ignoreFailures = true
        rulesMinimumPriority = 2
        sourceSets = [sourceSets.main, sourceSets.test]
        reportsDir = file("$project.buildDir/reports/pmd")
        ruleSets = []
        ruleSetFiles = files(rootProject.file("pmd-ruleset.xml"))
    }

    pmdMain.enabled = true
    pmdTest.enabled = true
}

dependencies {
    implementation project(':gazeplay-core')
    implementation project(':gazeplay-games')
    implementation project(':gazeplay-games-commons')
    implementation project(':gazeplay-commons')
    implementation project(':gazeplay-melordi')
    implementation project(':gazeplay-picto-pick')
    implementation project(':gazeplay-emmanuel')

    implementation 'javax.servlet:javax.servlet-api:4.0.1'
}

distributions {
    noJRE {
        setDistributionBaseName "${project.name}-no-jre"
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin") {
                into 'bin'
            }
        }
    }

    windows {
        setDistributionBaseName "${project.name}-windows-x64"
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/gazeplay-emmanuel-windows.bat") {
                into 'bin'
            }
            from("build/jre/windows-x64") {
                into 'lib/jre'
            }
        }
    }

    windowsx32{
        setDistributionBaseName "${project.name}-windows-x32"
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/gazeplay-windows.bat") {
                into 'bin'
            }
            from("build/jre/windows-x32") {
                into 'lib/jre'
            }
        }
    }

    windowsAfsr{
        setDistributionBaseName "${project.name}-afsr-windows-x64"
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/gazeplay-afsr-windows.bat") {
                into 'bin'
            }
            from("build/jre/windows-x64") {
                into 'lib/jre'
            }
        }
    }

    windowsAfsrx32{
        setDistributionBaseName "${project.name}-afsr-windows-x32"
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/gazeplay-afsr-windows.bat") {
                into 'bin'
            }
            from("build/jre/windows-x32") {
                into 'lib/jre'
            }
        }
    }

    windowsBera{
        setDistributionBaseName "${project.name}-bera-windows-x64"
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/gazeplay-bera-windows.bat") {
                into 'bin'
            }
            from("build/jre/windows-x64") {
                into 'lib/jre'
            }
        }
    }

    windowsBerax32{
        setDistributionBaseName "${project.name}-bera-windows-x32"
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/gazeplay-bera-windows.bat") {
                into 'bin'
            }
            from("build/jre/windows-x32") {
                into 'lib/jre'
            }
        }
    }

    linux {
        setDistributionBaseName "${project.name}-linux-x64"
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/gazeplay-linux.sh") {
                into 'bin'
            }
            from("build/bin/gazeplay-afsr-linux.sh") {
                into 'bin'
            }
            from("build/bin/gazeplay-bera-linux.sh") {
                into 'bin'
            }
            from("build/jre/linux-x64") {
                into 'lib/jre'
            }
            from("build/tobiiDrivers") {
                into 'tobiiDrivers'
            }
        }
    }

    arm {
        setDistributionBaseName "${project.name}-arm"
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/gazeplay-arm.sh") {
                into 'bin'
            }
            from("build/bin/gazeplay-bera-arm.sh") {
                into 'bin'
            }
            from("build/bin/gazeplay-afsr-arm.sh") {
                into 'bin'
            }
            from("build/jre/arm") {
                into 'lib/jre'
            }
        }
    }

    macos {
        setDistributionBaseName "${project.name}-macos"
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/gazeplay-macos.sh") {
                into 'bin'
            }
            from("build/bin/gazeplay-afsr-macos.sh") {
                into 'bin'
            }
            from("build/bin/gazeplay-bera-macos.sh") {
                into 'bin'
            }
            from("build/jre/macos") {
                into 'lib/jre'
            }
        }
    }
}

task('downloadAndExtractLinuxDependecies').dependsOn('downloadAndExtractLinuxJREwithLibavPlugin', 'downloadAndExtractTobiiDriversForLinux')
task('downloadAndExtractARMDependecies').dependsOn('downloadAndExtractARMJREwithLibavPlugin', 'downloadAndExtractTobiiDriversForLinux')

windowsDistZip.dependsOn(downloadAndExtractWindowsJRE)
windowsx32DistZip.dependsOn(downloadAndExtractWindowsJREx32)
windowsBeraDistZip.dependsOn(downloadAndExtractWindowsJRE)
windowsBerax32DistZip.dependsOn(downloadAndExtractWindowsJREx32)
windowsAfsrDistZip.dependsOn(downloadAndExtractWindowsJRE)
windowsAfsrx32DistZip.dependsOn(downloadAndExtractWindowsJREx32)
linuxDistTar.dependsOn(downloadAndExtractLinuxDependecies)
macosDistTar.dependsOn(downloadAndExtractMacosJRE)
armDistTar.dependsOn(downloadAndExtractARMDependecies)

tasks.withType(Tar){
    compression = Compression.GZIP
    archiveExtension.set('tar.gz')
}

distZip {
    duplicatesStrategy = 'exclude'
    //enabled = false
}
[bootJar, bootDistTar, bootDistZip]*.enabled = false

/*
bootDistTar{
    enabled = false
}

distTar{
    enabled = false
}

jar {
    enabled = false
}

bootJar {
    classifier = 'application'
}
*/

release {
    failOnPublishNeeded = false
    failOnCommitNeeded = false
}

mainClassName = 'net.gazeplay.GazePlayLauncher'

defaultTasks 'clean', 'build', 'checkPMDReport'
startScripts.enabled = false

afterReleaseBuild.dependsOn generateWindowsInstallerInDocker
afterReleaseBuild.dependsOn generateWindowsInstallerInDockerx32
afterReleaseBuild.dependsOn generateWindowsAfsrInstallerInDocker
//afterReleaseBuild.dependsOn generateWindowsAfsrInstallerInDockerx32
afterReleaseBuild.dependsOn generateWindowsBeraInstallerInDocker
//afterReleaseBuild.dependsOn generateWindowsBeraInstallerInDockerx32
